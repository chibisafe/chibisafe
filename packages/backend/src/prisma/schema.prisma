generator client {
	provider = "prisma-client-js"
	previewFeatures = ["relationJoins"]
}

datasource db {
	provider          = "sqlite"
	url               = "file:../../../../database/database.sqlite"
	shadowDatabaseUrl = "file:../../../../database/shadow.sqlite"
}

model users {
	id Int @id @default(autoincrement())
	uuid String @unique
	username String @unique
	password String
	enabled Boolean @default(true)
	storageQuota String @default("0")
	apiKey String? @unique
	passwordEditedAt DateTime?
	apiKeyEditedAt DateTime?
	createdAt DateTime @default(now())
	editedAt DateTime?
	files files[]
	roles roles[]
	links shortenedLinks []
}

model roles {
	id Int @id @default(autoincrement())
	name String @unique
	users users[]
}

model files {
	id Int @id @default(autoincrement())
	uuid String @unique
	userId Int?
	name String
	original String
	type String
	size String
	hash String
	ip String
	isS3 Boolean @default(false)
	isWatched Boolean @default(false)
	createdAt DateTime @default(now())
	editedAt DateTime?
	user users? @relation(fields: [userId], references: [id])
	albums albums[]
	tags tags[]
	quarantine Boolean @default(false)
	quarantineFile quarantineFiles?
}

model quarantineFiles {
	fileId String @unique
	file files @relation(fields: [fileId], references: [uuid])
	name String
	reason String?
}

model snippets {
	id Int @id @default(autoincrement())
	uuid String @unique
	userId Int?
	identifier String @unique
	name String
	description String?
	content String
	language String
	parentUuid String?
	createdAt DateTime @default(now())
	editedAt DateTime?
}

model shortenedLinks {
	id Int @id @default(autoincrement())
	uuid String @unique
	user users? @relation(fields: [userId], references: [id])
	userId Int?
	identifier String @unique
	destination String
	views Int @default(0)
	createdAt DateTime @default(now())
}

model albums {
	id Int @id @default(autoincrement())
	uuid String @unique
	userId Int
	name String
	description String?
	zippedAt DateTime?
	createdAt DateTime @default(now())
	editedAt DateTime?
	nsfw Boolean @default(false)
	files files[]
}

model bans {
	id Int @id @default(autoincrement())
	ip String
	reason String?
	createdAt DateTime @default(now())
}

model links {
	id Int @id @default(autoincrement())
	uuid String @unique
	userId Int
	albumId Int
	identifier String @unique
	views Int @default(0)
	enabled Boolean @default(true)
	enableDownload Boolean @default(false)
	expiresAt DateTime?
	createdAt DateTime @default(now())
	editedAt DateTime?
}

model settings {
	id Int @id @default(autoincrement())
	rateLimitWindow Int
	rateLimitMax Int
	secret String
	serviceName String
	chunkSize String
	chunkedUploadsTimeout Int
	maxSize String
	generateZips Boolean
	generateOriginalFileNameWithIdentifier Boolean @default(false)
	generatedFilenameLength Int
	generatedAlbumLength Int
	generatedLinksLength Int @default(8)
	saveDuplicatesToAlbum Boolean @default(false)
	blockedExtensions String
	blockNoExtension Boolean
	publicMode Boolean
	userAccounts Boolean
	disableStatisticsCron Boolean
	disableUpdateCheck Boolean @default(false)
	backgroundImageURL String
	logoURL String
	metaDescription String
	metaKeywords String
	metaTwitterHandle String
	metaDomain String @default("")
	serveUploadsFrom String @default("")
	enableMixedCaseFilenames Boolean @default(true)
	usersStorageQuota String @default("0")
	useNetworkStorage Boolean @default(false)
	useMinimalHomepage Boolean @default(false)
	useUrlShortener Boolean @default(false)
	generateThumbnails Boolean @default(true)
	privacyPolicyPageContent String @default("")
	termsOfServicePageContent String @default("")
	rulesPageContent String @default("")
	S3Region String @default("")
	S3Bucket String @default("")
	S3AccessKey String @default("")
	S3SecretKey String @default("")
	S3Endpoint String @default("")
	S3PublicUrl String @default("")
}

model statistics {
	id Int @id @default(autoincrement())
	batchId Int?
	type String?
	data String?
	createdAt DateTime @default(now())
}

model tags {
	id Int @id @default(autoincrement())
	uuid String @unique
	userId Int
	name String
	createdAt DateTime @default(now())
	editedAt  DateTime?
	files files[]
}

model invites {
	id Int @id @default(autoincrement())
	createdBy String
	usedBy String?
	code String @unique
	used Boolean @default(false)
	createdAt DateTime @default(now())
	editedAt DateTime?
}
